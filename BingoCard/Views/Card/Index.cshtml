@model BingoCard.Models.Card


@{
    ViewBag.Title = "BingoCard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script>
    var card;
    var markedSquares;
    var modalMsg = null;

    window.onload = function ()
    {
        card = @Html.Raw(Json.Encode(@Model));
        markedSquares = 0;
    }

    function markSquare(number)
    {           
        //Change the color
        document.getElementById(number).classList.toggle('btnMarked');

        //Find the Line and square in the array
        var isFoundSquare = false;
        var isExiting = false;
        var isNotInLine = false;
        var posLine = 0;
        var posSquare = 0;

        var i = 0;
        while (!isExiting)
        {
            var j = 0;
            isNotInLine = false;
            while (!isFoundSquare && !isNotInLine)
            {
                if (card.Lines[j].Number === number)
                {
                    //Number matched
                    posSquare = j;
                    isFoundSquare = true;
                    isExiting = true;
                }
                else
                {
                    //Number not matched
                    j++;
                    //Fix the "line"
                    if (j < 9) { posLine = 0;}
                    else if (j >= 9 && j < 18) { posLine = 1; }
                    else if (j >= 18 && j < 27) { posLine = 2; }
                    else if (j > 27) { isNotInLine = true; }
                }
            }
            //Go to next "line"
            i++;
            if (i > 2) { isExiting = true;}
        }
        //No matched number (never success XD)
        if (!isFoundSquare) { alert("ERROR: No match for number "+number+": i:"+i+",j:"+j); }
        else
        {
            //Square matched
            //Mark the square
            //No previous marked
            if (!card.Lines[posSquare].IsMarked)
            {
                //No previous marked
                card.Lines[posSquare].IsMarked = true;
                //Add +1 count to line counter
                var count = card.MarkedSquares[posLine];
                card.MarkedSquares[posLine] = 1 + count;
                //Add +1 to the general markedSquares
                markedSquares++;
            }
            else
            {
                //Previous marked
                card.Lines[posSquare].IsMarked = false;
                //Check if this line had line
                var count = card.MarkedSquares[posLine];
                if (card.Isline = true && count > 4) { card.IsLine = false; }
                //Sub -1 count to line counter
                card.MarkedSquares[posLine] = count - 1;
                //Desc -1 to the general markedSquares
                markedSquares--;
            }

            //Verify Bingo (markedSquares >14)
            if (markedSquares > 14)
            {
                //Block next lines msg
                card.IsBingo = true;
                //Set the alert msg
                modalMsg="#bingo-popup";
            }
            else
            {
                //Verify if Line ( Marked > 4)
                if (card.MarkedSquares[posLine] > 4 && !card.IsLine)
                {
                    //Block next lines msg
                    card.IsLine = true;
                    //Show the alert msg
                    modalMsg="#line-popup";
                }
            }
            //TODO: POST Controller call
            //Show the popUp
            if (modalMsg)
            {
                $(modalMsg).modal();
                modalMsg = null;
            }                
            //POST Card
            postCard(card);
        }
    }

    function postCard(card)
    {
        //TODO: POST Controller call to set the model status
        alert("To jQuery post call");
    }


</script>
<style>
    /*Square marked*/
    .btnMarked {
        background-color: dimgrey;
        color: lightsteelblue
    }

    /*No hover effect*/
    .btn-default:hover,
    .label-default[href]:hover,
    .tagcloud a:hover, button,
    .main-content [class*="navigation"] a:hover,
    .label-default[href]:focus,
    #infinite-handle span:hover,
    .btn.btn-default.read-more:hover,
    .btn-default:hover,
    .scroll-to-top:hover,
    .btn-default:focus,
    .btn-default:active,
    .btn-default.active,
    .site-main [class*="navigation"] a:hover,
    .more-link:hover,
    #image-navigation .nav-previous a:hover,
    #image-navigation .nav-next a:hover,
    .cfa-button:hover,
    .woocommerce a.button:hover,
    .woocommerce button.button:hover,
    .woocommerce input.button:hover,
    .woocommerce #respond input#submit.alt:hover,
    .woocommerce a.button:hover,
    .woocommerce button.button:hover,
    .woocommerce input.button:hover,
    .woocommerce a.button.alt:hover,
    .woocommerce button.button.alt:hover,
    .woocommerce input.button.alt:hover,
    a:hover .flex-caption h2 {
        background-color: rgba(0,0,0,0.5) !important;
        border-color: rgba(0,0,0,0.5) !important;
    }
</style>
<!-- Card body -->
<h1></h1>
<div class="row">
    <div class="col-md-12">
        @for (int i = 0; i < 3; i++)
        {
            <div class="btn-group btn-group-justified">
                @for (int j = 0; j < 9; j++)
                {
                    var square = (@Model.Lines[i, j].Number == 0) ? " " : @Model.Lines[i, j].Number.ToString();
                    var color = (@Model.Lines[i, j].Number == 0) ? "btn-primary" : "btn-default";
                    var card = Model;
                    <a id="@Model.Lines[i, j].Number" class="btn @color btn-lg special" style="font-size: 300%; width: 100px; height: 100px;" onclick="markSquare(@square)">@square</a>
                }
            </div>
        }
    </div>
</div>

<div>
    <button class="btn btn-primary" type="submit" onclick="postCard()">POST Card</button>
</div>

<!-- Line detection PopUp -->
<div class="container">
    <div class="modal" id="line-popup" role="dialog">
        <div class="modal-dialog modal-xl">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h1 class="modal-title text-center text-danger">!!!  L I N E A  !!!</h1>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Bingo detection PopUp -->
<div class="container">
    <div class="modal" id="bingo-popup" role="dialog">
        <div class="modal-dialog modal-xl">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h1 class="modal-title text-center text-danger">!!!  B I N G O  !!!</h1>
                </div>
            </div>
        </div>
    </div>
</div>