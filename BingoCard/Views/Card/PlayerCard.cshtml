@model BingoCard.Models.Card


@{
    ViewBag.Title = "PlayerCard";
    Layout = "~/Views/Shared/_LayoutPlayer.cshtml";
}

<script>
    var card;
    var markedSquares;
    var modalMsg = null;

    window.onload = function ()
    {
        card = @Html.Raw(Json.Encode(@Model));
        markedSquares = 0;
    }

    function markSquare(number)
    {
        //Change the color
        document.getElementById(number).classList.toggle('btnMarked');

        //Find the Line and square in the array
        var isFoundSquare = false;
        var isExiting = false;
        var isNotInLine = false;
        var posLine = 0;
        var posSquare = 0;

        var i = 0;
        while (!isExiting)
        {
            var j = 0;
            isNotInLine = false;
            while (!isFoundSquare && !isNotInLine)
            {
                if (card.Lines[j].Number === number)
                {
                    //Number matched
                    posSquare = j;
                    isFoundSquare = true;
                    isExiting = true;
                }
                else
                {
                    //Number not matched
                    j++;
                    //Fix the "line"
                    if (j < 9) { posLine = 0;}
                    else if (j >= 9 && j < 18) { posLine = 1; }
                    else if (j >= 18 && j < 27) { posLine = 2; }
                    else if (j > 27) { isNotInLine = true; }
                }
            }
            //Go to next "line"
            i++;
            if (i > 2) { isExiting = true;}
        }
        //No matched number (never success XD)
        if (!isFoundSquare) { alert("ERROR: No match for number "+number+": i:"+i+",j:"+j); }
        else
        {
            //Square matched
            //Mark the square
            //No previous marked
            if (!card.Lines[posSquare].IsMarked)
            {
                //No previous marked
                card.Lines[posSquare].IsMarked = true;
                //Add +1 count to line counter
                var count = card.MarkedSquares[posLine];
                card.MarkedSquares[posLine] = 1 + count;
                //Add +1 to the general markedSquares
                markedSquares++;
            }
            else
            {
                //Previous marked
                card.Lines[posSquare].IsMarked = false;
                //Check if this line had line
                var count = card.MarkedSquares[posLine];
                if (card.Isline = true && count > 4) { card.IsLine = false; }
                //Sub -1 count to line counter
                card.MarkedSquares[posLine] = count - 1;
                //Desc -1 to the general markedSquares
                markedSquares--;
            }

            //Verify Bingo (markedSquares >14)
            if (markedSquares > 14)
            {
                //POST isBingo
                var isVerified = isBingo(card.Player.RoomId, card.Player.Id);
                //Block next Bingo msg
                if (isVerified == true) {
                    card.IsBingo = true;
                    //Set the alert msg
                    //modalMsg = "#bingo-popup";
                }
            }
            else
            {
                //Verify if Line ( Marked > 4)
                if (card.MarkedSquares[posLine] > 4 && !card.IsLine)
                {
                    //POST isLine
                    var isVerified = isLine(card.Player.RoomId, card.Player.Id);
                    if (isVerified==true) {
                        //Block next lines msg
                        card.IsLine = true;
                        //Show the alert msg
                        modalMsg = "#line-popup";
                    }
                }
            }
            //Show the popUp
            if (modalMsg)
            {
                $(modalMsg).modal();
                modalMsg = null;
            }
        }
    }

    function isLine(roomId, playerId)
    {
        var data = {
            roomId: roomId,
            playerId: playerId
        }

        var isCorrect = false;

        $.ajax({
            url: '/Card/IsLine/',
            type: 'POST',
            data: data,
            async: false,
            success: function (data) { isCorrect = true; },
            error: function (xhr, ajaxOptions, thrownError) {
                switch (xhr.status) {
                    case 204:
                        alert("Player or Room not found.");
                        break;
                    case 409:
                        //TODEBUG: alert("Other player already is Line.");
                        break;
                    default:
                        alert("Server error, try later-" + xhr.ResponseText);
                }
                isCorrect =  false;
            },
            complete: function (data) { return isCorrect; }
        });
        return returnBool(isCorrect);
    }

        function isBingo(roomId, playerId) {
        var data = {
            roomId: roomId,
            playerId: playerId
        }
        var isCorrect = false;

        $.ajax({
            url: '/Card/IsBingo/',
            type: 'POST',
            data: data,
            async: false,
            success: function (data) { isCorrect = true; },
            error: function (xhr, ajaxOptions, thrownError) {
                switch (xhr.status) {
                    case 204:
                        alert("Player or Room not found.");
                        break;
                    case 409:
                        //TODEBUG: alert("Other player already is Bingo.");
                        break;
                    default:
                        alert("Server error, try later-" + xhr.ResponseText);
                }
                isCorrect = false;
            },
            complete: function (data) { return isCorrect; }
        });
        return returnBool(isCorrect);
        }

    function returnBool(value) {
            if (value == true) {
                return true;
            } else {
                return false;
            }
    }

    function getRoomMessage() {
        var player = card.Player;
        var isCorrect = false;

        //Get message room
        $.ajax({
            url: '/Card/GetMessageRoom/',
            type: 'GET',
            data: player,
            async: false,
            cache: false,
            contentType: 'application/json',
            datatype: "html",
            success: function (data) {
                isCorrect = true;
                
                $('#roomMsgWinner').empty();
                $('#roomMsg').empty();
                $("#roomMsgWinner").html(data);
                $("#roomMsg").html(data);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                switch (xhr.status) {
                    case 204:
                        alert("Player not found.");
                        break;
                    case 409:
                        //TODEBUG: alert("Other player already is Bingo.");
                        break;
                    default:
                        alert("Server error, try later-" + xhr.ResponseText);
                }
                isCorrect = false;
            },
            complete: function (data) {
                return isCorrect;
            }
        });
    }

    function detectBingoRoom() {
        //Detect other player bingo
        var playerRoomId = {
            playerRoomId: card.Player.RoomId
        };

        $.ajax({
            url: '/Card/CheckWinnerRoom/',
            type: 'GET',
            data: playerRoomId,
            async: false,
            datatype: "json",
            success: function (data) {
                if (data.result) {
                    getRoomMessage();
                    $("#end_game_bingo-popup").modal();
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                switch (xhr.status) {
                    case 204:
                        alert("Room winner not found.");
                        break;
                    case 409:
                        //TODEBUG: alert("Other player already is Bingo.");
                        break;
                    default:
                        alert("Server error, try later-" + xhr.ResponseText);
                }
            }
        });
    }

    //Update 4 times in a second room message
    //https://stackoverflow.com/questions/28613630/how-do-i-refresh-a-partial-view-every-3-seconds-in-mvc-4
    setInterval(function () {

        getRoomMessage();
        detectBingoRoom();
          
        }, 500);  

</script>
<style>
    /*Square marked*/
    .btnMarked {
        background-color: dimgrey;
        color: lightsteelblue
    }

    /*No hover effect*/
    .btn-default:hover,
    .label-default[href]:hover,
    .tagcloud a:hover, button,
    .main-content [class*="navigation"] a:hover,
    .label-default[href]:focus,
    #infinite-handle span:hover,
    .btn.btn-default.read-more:hover,
    .btn-default:hover,
    .scroll-to-top:hover,
    .btn-default:focus,
    .btn-default:active,
    .btn-default.active,
    .site-main [class*="navigation"] a:hover,
    .more-link:hover,
    #image-navigation .nav-previous a:hover,
    #image-navigation .nav-next a:hover,
    .cfa-button:hover,
    .woocommerce a.button:hover,
    .woocommerce button.button:hover,
    .woocommerce input.button:hover,
    .woocommerce #respond input#submit.alt:hover,
    .woocommerce a.button:hover,
    .woocommerce button.button:hover,
    .woocommerce input.button:hover,
    .woocommerce a.button.alt:hover,
    .woocommerce button.button.alt:hover,
    .woocommerce input.button.alt:hover,
    a:hover .flex-caption h2 {
        background-color: rgba(0,0,0,0.5) !important;
        border-color: rgba(0,0,0,0.5) !important;
    }
</style>
<!-- Card header -->
@{
    var avatarURL = "https://avatars.dicebear.com/4.5/api/bottts/" + System.Web.HttpUtility.UrlEncode(@Model.Player.Name) + ".svg?h=70";
    BingoCard.DataAccess.BingoCardDBContext db = new BingoCard.DataAccess.BingoCardDBContext();
    BingoCard.Models.Room room = new BingoCard.Models.Room();
    if (Model.Player.RoomId != Guid.Empty) room = db.Rooms.Find(Model.Player.RoomId);
}
<h6></h6>
<div class="container">
    <div class="row justify-content-center">
        <div class="col-xs-2">
            <a href="@Url.Action("Details", "Player", new { id = @Model.Player.Id })">
                <img src=@avatarURL />
            </a>
        </div>
        <div class="col-xs-3 text-center">
            @*<div class="text-center bg-info">@Model.Player.RoomName</div>*@
            <div class="text-center bg-success">
                @{
                    if (string.IsNullOrEmpty(room.Name))
                    {
                        <p>Playing alone</p>
                    }
                    else
                    {
                        <p>Room @room.Name</p>
                    }
                }
                <h3>@Model.Player.Name</h3>

            </div>
        </div>
        <div class=" col-xs-6">
            <div class="text-center bg-info" id="roomMsg">@Html.Partial("_RoomMsgPartial", Model.Player)</div>
        </div>
        <div class="col-xs-1">
        </div>
    </div>
</div>
<!-- Card body -->
<div class="row">
    <div class="col-md-12">
        @for (int i = 0; i < 3; i++)
        {
            <div class="btn-group d-flex">
                @for (int j = 0; j < 9; j++)
                {
                    var square = (@Model.Lines[i, j].Number == 0) ? " " : @Model.Lines[i, j].Number.ToString();
                    var color = (@Model.Lines[i, j].Number == 0) ? "btn-primary" : "btn-default";
                    var card = Model;
                    <a id="@Model.Lines[i, j].Number" class="btn @color btn-group-sm special" style="font-size: 200%; width:2.5em; height: 2.5em;" onclick="markSquare(@square)">@square</a>
                }
            </div>
        }
    </div>
</div>

@*<div>
        <button class="btn btn-primary" type="submit" onclick="postCard()">POST Card</button>
    </div>*@

<!-- Line detection PopUp -->
<div class="container">
    <div class="modal" id="line-popup" role="dialog">
        <div class="modal-dialog modal-xl">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h1 class="modal-title text-center text-danger">!!!  L I N E A  !!!</h1>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Bingo detection PopUp -->
<div class="container">
    <div class="modal" id="bingo-popup" role="dialog" data-backdrop="static">
        <div class="modal-dialog modal-xl">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title text-center text-danger">!!!  B I N G O  !!!</h1>
                    <div class="row">
                        <div class="col-md-12">
                            <p><a class="btn btn-success btn-lg center-block" href="@Url.Action("PlayerCard", "Card", new { id = Model.Player.Id })">New game</a></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Other player Bingo PopUp -->
<div class="container">
    <div class="modal" id="end_game_bingo-popup" role="dialog" data-backdrop="static">
        <div class="modal-dialog modal-xl">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <div class="text-center bg-info" id="roomMsgWinner">@Html.Partial("_WinnerMsgPartial", Model.Player)</div>
                    <div class="row">
                        <div class="col-md-12">
                            <p><a class="btn btn-success btn-lg center-block" href="@Url.Action("PlayerCard", "Card", new { id = Model.Player.Id })">New game</a></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>